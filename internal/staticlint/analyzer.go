package staticlint

import (
	"bytes"
	"go/ast"
	"go/printer"
	"strings"

	"golang.org/x/tools/go/analysis"
)

var MainExitAnalyzer = &analysis.Analyzer{
	Name: "mainexitcheck",
	Doc:  "check for exit in main",
	Run:  run,
}

func run(pass *analysis.Pass) (interface{}, error) {
	for _, file := range pass.Files {
		if file.Name.Name != "main" {
			continue
		}

		testFile := false
		for _, comment := range file.Comments {
			if strings.HasPrefix(comment.Text(), "Code generated by 'go test'") {
				testFile = true
				break
			}
		}
		if testFile {
			continue
		}

		ast.Inspect(file, func(node ast.Node) bool {
			switch x := node.(type) {
			case *ast.FuncDecl:
				if x.Name.String() == "main" {
					for _, stmt := range x.Body.List {
						switch y := stmt.(type) {
						case *ast.ExprStmt:
							if call, ok := y.X.(*ast.CallExpr); ok {
								callStr := bytes.NewBuffer(nil)
								printer.Fprint(callStr, pass.Fset, call)

								if strings.HasPrefix(callStr.String(), "os.Exit") {
									pass.Reportf(call.Pos(), "os.Exit call in main function")
								}
							}
						}
					}
				}
			}

			return true
		})

	}

	return nil, nil
}
