// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Get"
                ],
                "summary": "Запрос получения всех метрик",
                "operationId": "getAllMetrics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Status"
                ],
                "summary": "Запрос для проверки соединения с БД",
                "operationId": "Ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update/": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update"
                ],
                "summary": "Запрос для обновления метрики",
                "operationId": "Update",
                "parameters": [
                    {
                        "description": "Метрика для обновления",
                        "name": "metric",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.MetricData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MetricData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/update/{metricKind}/{metricName}/{metricValue}": {
            "post": {
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Update"
                ],
                "summary": "Запрос для обновления метрики",
                "operationId": "UpdateOld",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Тип метрики для обновления",
                        "name": "metricKind",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "имя метрики",
                        "name": "metricName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Значение метрики",
                        "name": "metricValue",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "20",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "ошибка",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "ошибка",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/updates/": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Update"
                ],
                "summary": "Запрос для обновления метрики",
                "operationId": "Updates",
                "parameters": [
                    {
                        "description": "Метрики для обновления",
                        "name": "metric",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.MetricData"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/value/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get"
                ],
                "summary": "Запрос для получения метрики",
                "operationId": "Value",
                "parameters": [
                    {
                        "description": "Метрика для обновления",
                        "name": "metric",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.MetricData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MetricData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/value/{metricKind}/{metricName}": {
            "get": {
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Get"
                ],
                "summary": "Запрос для получения метрики",
                "operationId": "GetMetricValue",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Тип метрики для обновления",
                        "name": "metricKind",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "имя метрики",
                        "name": "metricName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "20",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "ошибка",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.MetricData": {
            "type": "object",
            "properties": {
                "delta": {
                    "description": "значение метрики в случае передачи counter",
                    "type": "integer"
                },
                "id": {
                    "description": "имя метрики",
                    "type": "string"
                },
                "type": {
                    "description": "параметр, принимающий значение gauge или counter",
                    "type": "string"
                },
                "value": {
                    "description": "значение метрики в случае передачи gauge",
                    "type": "number"
                }
            }
        },
        "model.Response": {
            "type": "object",
            "properties": {
                "detail": {
                    "type": "string"
                },
                "ok": {
                    "type": "boolean"
                }
            }
        }
    },
    "tags": [
        {
            "description": "\"Группа запросов получения метрик\"",
            "name": "Get"
        },
        {
            "description": "\"Группа запросов обновления метрик\"",
            "name": "Update"
        },
        {
            "description": "\"Группа запросов статуса сервиса\"",
            "name": "Status"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "mtrcscollector API",
	Description:      "Серви для сбора метрик.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
